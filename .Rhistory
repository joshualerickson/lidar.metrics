z_vals <- trees$Z
# Stratification
zbin <- cut(z_vals,
breaks = c(0.3, 6.1, 12.1, 24.1, 36.1, Inf),
labels = c("low", "low_mid", "mid", "mid_upper", "upper"))
strata_table <- table(zbin)
# Handle missing strata bins
strata <- c("low", "low_mid", "mid", "mid_upper", "upper")
strata_counts <- setNames(rep(0, length(strata)), strata)
strata_counts[names(strata_table)] <- as.integer(strata_table)
# Fit B-spline surface using splines::bs() + lm()
topo_entropy <- NA_real_
residual_sd <- NA_real_
df <- data.frame(x = coords[, 1], y = coords[, 2], z = z_vals)
if (nrow(df) >= 5) {
try({
fit <- lm(z ~ splines::bs(x, df = 4) + splines::bs(y, df = 4), data = df)
z_pred <- predict(fit, newdata = df)
residuals <- df$z - z_pred
residual_sd <- sd(residuals)
h <- hist(residuals, breaks = 10, plot = FALSE)
p <- h$counts / sum(h$counts)
topo_entropy <- -sum(p * log(p + 1e-10))
}, silent = TRUE)
}
# Canopy Cover
first_above <- sum(z > 0.3 & return_number == 1)
total_first <- sum(return_number == 1)
canopy_cover <- ifelse(total_first == 0, NA, first_above / total_first)
rumple <- tryCatch(
suppressMessages(suppressWarnings(rumple_index(x, y, z))),
error = function(e) NA_real_
)
metrics <- list(
n_trees = nrow(trees),
n_low = strata_counts["low"],
n_low_mid = strata_counts["low_mid"],
n_mid = strata_counts["mid"],
n_mid_upper = strata_counts["mid_upper"],
n_upper = strata_counts["upper"],
topo_residual_sd = residual_sd,
topo_entropy = topo_entropy,
rumple = rumple,
fractional_canopy_cover = canopy_cover
)
return(metrics)
}
tree_metrics <- pixel_metrics(las_small, func = ~my_tree_structure_metrics(X, Y, Z, ReturnNumber), res = 30)
plot(tree_metrics)
canopy_cover_metrics <- function(x, y, z, return_number, window_func = function(x) {pmax(3, x * 0.25)}) {
if (length(z) < 5) return(list())  # Skip if too few points
trees <- tree_detection(x, y, z, window_func = window_func)
if (nrow(trees) < 5) return(list())  # Skip if too few trees
coords <- sf::st_coordinates(trees)
z_vals <- trees$Z
# Stratification
zbin <- cut(z_vals,
breaks = c(0.3, 6.1, 12.1, 24.1, 36.1, Inf),
labels = c("low", "low_mid", "mid", "mid_upper", "upper"))
strata_table <- table(zbin)
# Handle missing strata bins
strata <- c("low", "low_mid", "mid", "mid_upper", "upper")
strata_counts <- setNames(rep(0, length(strata)), strata)
strata_counts[names(strata_table)] <- as.integer(strata_table)
# Fit B-spline surface using splines::bs() + lm()
topo_entropy <- NA_real_
residual_sd <- NA_real_
df <- data.frame(x = coords[, 1], y = coords[, 2], z = z_vals)
if (nrow(df) >= 5) {
try({
fit <- lm(z ~ splines::bs(x, df = 4) + splines::bs(y, df = 4), data = df)
z_pred <- predict(fit, newdata = df)
residuals <- df$z - z_pred
residual_sd <- sd(residuals)
h <- hist(residuals, breaks = 10, plot = FALSE)
p <- h$counts / sum(h$counts)
topo_entropy <- -sum(p * log(p + 1e-10))
}, silent = TRUE)
}
# Canopy Cover
first_above <- sum(z > 0.3 & return_number == 1)
total_first <- sum(return_number == 1)
canopy_cover <- ifelse(total_first == 0, NA, first_above / total_first)
rumple <- tryCatch(
suppressMessages(suppressWarnings(rumple_index(x, y, z))),
error = function(e) NA_real_
)
lad <- lad_metrics(z)
metrics <- list(
n_trees = nrow(trees),
n_low = strata_counts["low"],
n_low_mid = strata_counts["low_mid"],
n_mid = strata_counts["mid"],
n_mid_upper = strata_counts["mid_upper"],
n_upper = strata_counts["upper"],
topo_residual_sd = residual_sd,
topo_entropy = topo_entropy,
rumple = rumple,
fractional_canopy_cover = canopy_cover
)
return(c(metrics, lad))
}
lad_metrics <- function(z, dz = 1, k = 0.5, z0 = 2) {
profile <- lidR::LAD(z, dz = dz, k = k, z0 = z0)
if (nrow(profile) == 0) {
return(list(
LAI = NA_real_,
LAD_max = NA_real_,
LAD_mean = NA_real_,
LAD_z_max = NA_real_
))
}
LAI <- sum(profile$lad * dz, na.rm = TRUE)
LAD_max <- max(profile$lad, na.rm = TRUE)
LAD_mean <- mean(profile$lad, na.rm = TRUE)
LAD_z_max <- profile$z[which.max(profile$lad)]
return(list(
LAI = LAI,
LAD_max = LAD_max,
LAD_mean = LAD_mean,
LAD_z_max = LAD_z_max
))
}
tree_metrics <- pixel_metrics(las_small, func = ~canopy_cover_metrics(X, Y, Z, ReturnNumber), res = 30)
plot(tree_metrics)
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
lidR::LAD
lidR::gap_fraction_profile
?lidR::LAD
View(lad_voxels)
lad %>% ggplot(aes(lad)) + geom_density()
lad_voxels %>% ggplot(aes(lad)) + geom_density()
lad_voxels %>% ggplot(aes(z, lad)) + geom_col()
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
install.packages('arrow')
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
trees <- lidR::locate_trees(las_small, lmf(ws = function(x){x*0.17 + 3}))
trees
# Extract coordinates
coords <- sf::st_coordinates(trees)  # matrix with columns X, Y
coords
as.data.frame(coords)
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
out_dir <- '/home/josh.erickson/Documents/projects/vbflood/dev/'
out_dir <- '/home/josh.erickson/Documents/projects/vbflood/dev/test_fst/'
tree_metrics <- pixel_metrics(las_small, func = ~canopy_cover_metrics(X, Y, Z, ReturnNumber, out_dir = out_dir), res = 30)
tree_metrics
plot(tree_metrics)
library(future)
library(lidR)
library(terra)
connectivity_func <- "/mnt/boreas/lidar_download/code/grid_metric_lynx.R"
source(connectivity_func) # source metric functions called by grid_metrics()
plan(multisession, workers=15)
set_lidr_threads(4)
ctg_norm_sub <- readLAScatalog("/home/josh.erickson/Documents/projects/vbflood/dev/test_laz_out/")
opt_filter(ctg_norm_sub) <-  "-drop_class 7 9 -drop_withheld"
opt_chunk_size(ctg_norm_sub) <- 0
opt_chunk_buffer(ctg_norm_sub) <- 30
opt_chunk_alignment(ctg_norm_sub) <- c(15, 15)
opt_stop_early(ctg_norm_sub) <- FALSE
opt_output_files(ctg_norm_sub) <- paste0('/home/josh.erickson/Documents/projects/vbflood/dev/',"{ID}_testing_canopy_metrics")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,return_number = ReturnNumber, out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
ctg_norm_sub[1:2,]
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,return_number = ReturnNumber, out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,return_number = ReturnNumber, out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1:2,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~connectivity_metrics_binned(X,Y,Z, voxel_res = 3,
edge_thresh_values = c(3,3),
z_30 = 9.1),
res=30))
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
plot(rast('dev/1_testing_canopy_metrics.tif'))
plot(rast('/home/josh.erickson/Documents/projects/vbflood/dev/1_testing_canopy_metrics.tif'))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
plot(rast('/home/josh.erickson/Documents/projects/vbflood/dev/1_testing_canopy_metrics.tif'))
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
lidR::LAD
lidR::gap_fraction_profile
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
rumple_index
?lidR::rumple_index
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
plan(sequential)
10/.22
100/.22
900/.22
plan(multisession, workers=15)
set_lidr_threads(4)
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
5*.17
+2
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
wf <- function(x) {
x <- pmax(x, 1e-3)  # avoid log(0) or small values
ws <- log1p(x) * 1.5 + 2
ws <- pmin(pmax(ws, 2), 6)  # constrain to [2, 6]
return(ws)
}
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = function(x) x*0.25 + 3,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = function(x) x*0.25 + 3,
out_dir = out_dir),
res=30))
wf <- function(x) {
x <- pmax(x, 1e-3)  # avoid log(0) or small values
ws <- log1p(x) * 1.5 + 2
ws <- pmin(pmax(ws, 2), 6)  # constrain to [2, 6]
return(ws)
}
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[1,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
safe_canopy_cover_metrics <- function(...) {
tryCatch(
canopy_cover_metrics(...),
error = function(e) {
message("Tile failed: ", e$message)
return(named_zero_metrics("canopy"))
}
)
}
system.time(pixel_metrics(ctg_norm_sub,~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = function(x) {3 + x*0.25},
out_dir = out_dir),
res=30))
wf = function(x) {
x <- pmax(x, 1)
pmin(pmax(log1p(x) * 1.5 + 2, 2), 6)
}
wf = function(x) {
x <- pmax(x, 1)
pmin(pmax(log1p(x) * 1.5 + 2, 2), 6)
}
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub,~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[4,],~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[5,],~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[5:6,],~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
window_func = function(x) {
w <- pmax(x, 1)
w <- log1p(w) * 1.5 + 2
w <- pmin(w, 6)
if (any(w <= 0 | is.na(w))) {
w[is.na(w) | w <= 0] <- 3  # fallback default
}
return(w)
}
system.time(pixel_metrics(ctg_norm_sub[5:6,],~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[5:6,],~safe_canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
system.time(pixel_metrics(ctg_norm_sub[5:6,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[5:6,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
test <- tree_detection(x = runif(20), y = runif(20), z = runif(20, 0, 40))
str(test)
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
system.time(pixel_metrics(ctg_norm_sub[5:6,],~canopy_cover_metrics(X,Y,Z,
return_number = ReturnNumber,
window_func = wf,
out_dir = out_dir),
res=30))
wf
plot(rast('/home/josh.erickson/Documents/projects/vbflood/dev/1_testing_canopy_metrics.tif'))
source("/mnt/boreas/lidar_download/code/grid_metric_lynx.R")
setwd('/mnt/DataDrive1/data/LIDAR/github/')
source("/mnt/DataDrive1/data/LIDAR/github/R/grid_metric_lynx.R")
usethis::create_package('.', open = F)
